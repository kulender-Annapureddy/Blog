{"ast":null,"code":"var _jsxFileName = \"D:\\\\for cv\\\\Blog\\\\client\\\\src\\\\pages\\\\indexPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Post from '../components/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction IndexPage() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch('http://localhost:2000/post');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const posts = await response.json();\n        setPosts(posts);\n      } catch (error) {\n        console.error('Error fetching posts:', error.message);\n        // Handle the error as needed (e.g., set an error state)\n      }\n    };\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.length > 0 && posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this))\n  }, void 0, false);\n}\n_s(IndexPage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = IndexPage;\nexport default IndexPage;\nvar _c;\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"names":["React","useEffect","useState","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","IndexPage","_s","posts","setPosts","fetchPosts","response","fetch","ok","Error","status","json","error","console","message","children","length","map","post","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/for cv/Blog/client/src/pages/indexPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Post from '../components/post'\r\n\r\nfunction IndexPage() {\r\n  const [posts, setPosts] = useState([]);\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:2000/post');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n  \r\n        const posts = await response.json();\r\n        setPosts(posts);\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error.message);\r\n        // Handle the error as needed (e.g., set an error state)\r\n      }\r\n    };\r\n  \r\n    fetchPosts();\r\n  }, []);\r\n  return (\r\n   <>\r\n   {posts.length > 0 && posts.map(post => (\r\n    <Post key={post.id} {...post} />\r\n   ))}\r\n   \r\n\r\n   </>\r\n  )\r\n}\r\n\r\nexport default IndexPage"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtCD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;QAC1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAC3D;QAEA,MAAMP,KAAK,GAAG,MAAMG,QAAQ,CAACK,IAAI,CAAC,CAAC;QACnCP,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;QACrD;MACF;IACF,CAAC;IAEDT,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EACN,oBACCP,OAAA,CAAAE,SAAA;IAAAe,QAAA,EACCZ,KAAK,CAACa,MAAM,GAAG,CAAC,IAAIb,KAAK,CAACc,GAAG,CAACC,IAAI,iBAClCpB,OAAA,CAACF,IAAI;MAAA,GAAmBsB;IAAI,GAAjBA,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAC/B;EAAC,gBAGA,CAAC;AAEN;AAACrB,EAAA,CA7BQD,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AA+BlB,eAAeA,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}